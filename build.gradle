
plugins {
    id 'java'
    id 'pmd'
    id 'jacoco'
    id 'application'
    alias(libs.plugins.shadow)
    alias(libs.plugins.nebula.lint)
}

group 'no.sikt.nva'
version '2.0'

sourceCompatibility = JavaVersion.VERSION_21  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_21 // bytecode target version

repositories {
    gradlePluginPortal()
    mavenCentral()
}

application {
    mainClass = "no.sikt.nva.BrageMigrationCommand"
}

shadowJar {

    //Prevents multiple log4j configurations into the jar.
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

dependencies {

    implementation libs.opencsv
    implementation libs.annotations
    
    testImplementation libs.bundles.testing
    testImplementation libs.mockito.junit.jupiter
    testRuntimeOnly libs.junit.jupiter.engine
    
    implementation libs.bundles.logging
    
    implementation libs.picocli
    annotationProcessor libs.picocli.codegen
    
    implementation libs.aws.s3.v2
    implementation libs.aws.sts
    
    implementation libs.bundles.nva
    testImplementation libs.nva.testutils
    
    implementation libs.jaxb.runtime
    implementation libs.bundles.jackson
    
    implementation libs.bundles.jena
    implementation libs.commons.validator
    implementation libs.joda.time
    
    implementation project(':brage-migration-common')
    implementation project(':post-to-aws')
    
    implementation libs.bundles.poi
    implementation libs.any23.core
}

compileJava {
    //Needed for picoli annotation processor:
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

tasks.named('test') {
    useJUnitPlatform {
        excludeTags "RemoteTest"
    }
    failFast = true
    finalizedBy jacocoTestReport
}

gradleLint {
    rules = ['all-dependency']
    reportFormat = 'html'
    reportOnlyFixableViolations = true
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}
