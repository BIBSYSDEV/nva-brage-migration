plugins {
    id 'java'
    id 'pmd'
    id 'jacoco'
    id 'application'
    alias(libs.plugins.nebula.lint)
}

group 'no.sikt.nva.brage.migration.aws'
version '1.1'

sourceCompatibility = JavaVersion.VERSION_21  // source-code version and must be <= targetCompatibility
targetCompatibility = JavaVersion.VERSION_21 // bytecode target version

repositories {
    mavenCentral()
}

dependencies {
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    
    implementation libs.nva.s3
    implementation libs.nva.logutils
    implementation libs.nva.json
    implementation libs.nva.core
    implementation libs.log4j.slf4j.impl
    implementation libs.log4j.core
    
    implementation libs.jackson.jsonld
    implementation libs.aws.s3.v2
    implementation libs.aws.s3.v1
    implementation libs.tika.core
    
    implementation project(':brage-migration-common')
    
    testImplementation libs.nva.testutils
    testImplementation libs.mockito.core
    testImplementation libs.hamcrest
    testImplementation libs.hamcrest.core
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

test {
    useJUnitPlatform()
    failFast = true
    finalizedBy jacocoTestReport
}

gradleLint {
    rules = ['all-dependency']
    reportFormat = 'html'
    reportOnlyFixableViolations = true
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }

        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
}